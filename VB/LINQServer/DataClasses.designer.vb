'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.261
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Data
Imports System.Collections.Generic
Imports System.Reflection
Imports System.Linq
Imports System.Linq.Expressions
Imports System.ComponentModel
Imports System

Namespace LINQServer

    <Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Database")>
    Public Partial Class DataClassesDataContext
        Inherits System.Data.Linq.DataContext

        Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New System.Data.Linq.Mapping.AttributeMappingSource()

#Region "Extensibility Method Definitions"
        Partial Private Sub OnCreated()
        End Sub

        Partial Private Sub InsertItem(ByVal instance As LINQServer.Item)
        End Sub

        Partial Private Sub UpdateItem(ByVal instance As LINQServer.Item)
        End Sub

        Partial Private Sub DeleteItem(ByVal instance As LINQServer.Item)
        End Sub

#End Region
        Public Sub New()
            MyBase.New(Global.LINQServer.Properties.Settings.[Default].DatabaseConnectionString1, LINQServer.DataClassesDataContext.mappingSource)
            Me.OnCreated()
        End Sub

        Public Sub New(ByVal connection As String)
            MyBase.New(connection, LINQServer.DataClassesDataContext.mappingSource)
            Me.OnCreated()
        End Sub

        Public Sub New(ByVal connection As System.Data.IDbConnection)
            MyBase.New(connection, LINQServer.DataClassesDataContext.mappingSource)
            Me.OnCreated()
        End Sub

        Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
            MyBase.New(connection, mappingSource)
            Me.OnCreated()
        End Sub

        Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
            MyBase.New(connection, mappingSource)
            Me.OnCreated()
        End Sub

        Public ReadOnly Property Items As System.Data.Linq.Table(Of LINQServer.Item)
            Get
                Return Me.GetTable(Of LINQServer.Item)()
            End Get
        End Property
    End Class

    <Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Items")>
    Public Partial Class Item
        Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As System.ComponentModel.PropertyChangingEventArgs = New System.ComponentModel.PropertyChangingEventArgs(System.[String].Empty)

        Private _Id As Integer

        Private _Name As String

#Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub

        Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
        End Sub

        Partial Private Sub OnCreated()
        End Sub

        Partial Private Sub OnIdChanging(ByVal value As Integer)
        End Sub

        Partial Private Sub OnIdChanged()
        End Sub

        Partial Private Sub OnNameChanging(ByVal value As String)
        End Sub

        Partial Private Sub OnNameChanged()
        End Sub

#End Region
        Public Sub New()
            Me.OnCreated()
        End Sub

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="Int NOT NULL", IsPrimaryKey:=True)>
        Public Property Id As Integer
            Get
                Return Me._Id
            End Get

            Set(ByVal value As Integer)
                If(Me._Id <> value) Then
                    Me.OnIdChanging(value)
                    Me.SendPropertyChanging()
                    Me._Id = value
                    Me.SendPropertyChanged("Id")
                    Me.OnIdChanged()
                End If
            End Set
        End Property

        <Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50)")>
        Public Property Name As String
            Get
                Return Me._Name
            End Get

            Set(ByVal value As String)
                If(Not Equals(Me._Name, value)) Then
                    Me.OnNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._Name = value
                    Me.SendPropertyChanged("Name")
                    Me.OnNameChanged()
                End If
            End Set
        End Property

        Public Event PropertyChanging As System.ComponentModel.PropertyChangingEventHandler Implements Global.System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements Global.System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            RaiseEvent PropertyChanging(Me, LINQServer.Item.emptyChangingEventArgs)
        End Sub

        Protected Overridable Sub SendPropertyChanged(ByVal propertyName As System.[String])
            RaiseEvent PropertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
        End Sub
    End Class
End Namespace
